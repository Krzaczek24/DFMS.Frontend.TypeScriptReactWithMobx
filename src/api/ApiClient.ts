//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IAuthenticationClient {

    /**
     * @param body (optional) 
     * @return Success
     */
    authenticate(body: LogonInput | undefined): Promise<string>;

    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: RegisterInput | undefined): Promise<User>;
}

export class AuthenticationClient implements IAuthenticationClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    authenticate(body: LogonInput | undefined): Promise<string> {
        let url_ = this.baseUrl + "/authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAuthenticate(_response);
        });
    }

    protected processAuthenticate(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: RegisterInput | undefined): Promise<User> {
        let url_ = this.baseUrl + "/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(null as any);
    }
}

export interface IFormTemplateClient {

    /**
     * @return Success
     */
    formTemplate(): Promise<void>;
}

export class FormTemplateClient implements IFormTemplateClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    formTemplate(): Promise<void> {
        let url_ = this.baseUrl + "/form-template";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFormTemplate(_response);
        });
    }

    protected processFormTemplate(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IFormTemplateFieldsClient {

    /**
     * @return Success
     */
    fieldDefinitionsGet(): Promise<FormFieldDefinition[]>;

    /**
     * @return Success
     */
    fieldDefinitionsPost(): Promise<void>;

    /**
     * @return Success
     */
    fieldDefinitionsDelete(id: number): Promise<void>;
}

export class FormTemplateFieldsClient implements IFormTemplateFieldsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    fieldDefinitionsGet(): Promise<FormFieldDefinition[]> {
        let url_ = this.baseUrl + "/form-template/field-definitions";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFieldDefinitionsGet(_response);
        });
    }

    protected processFieldDefinitionsGet(response: Response): Promise<FormFieldDefinition[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FormFieldDefinition.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FormFieldDefinition[]>(null as any);
    }

    /**
     * @return Success
     */
    fieldDefinitionsPost(): Promise<void> {
        let url_ = this.baseUrl + "/form-template/field-definitions";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFieldDefinitionsPost(_response);
        });
    }

    protected processFieldDefinitionsPost(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    fieldDefinitionsDelete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/form-template/field-definitions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFieldDefinitionsDelete(_response);
        });
    }

    protected processFieldDefinitionsDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IFormTemplateFieldValidationClient {

    /**
     * @return Success
     */
    validationRulesGet(): Promise<FormFieldValidationRuleDefinition[]>;

    /**
     * @param body (optional) 
     * @return Success
     */
    validationRulesPost(body: FormFieldValidationRuleDefinition | undefined): Promise<void>;

    /**
     * @param body (optional) 
     * @return Success
     */
    validationRulesPut(id: number, body: FormFieldValidationRuleDefinition | undefined): Promise<void>;

    /**
     * @return Success
     */
    validationRulesDelete(id: number): Promise<void>;
}

export class FormTemplateFieldValidationClient implements IFormTemplateFieldValidationClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    validationRulesGet(): Promise<FormFieldValidationRuleDefinition[]> {
        let url_ = this.baseUrl + "/form-template/validation-rules";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValidationRulesGet(_response);
        });
    }

    protected processValidationRulesGet(response: Response): Promise<FormFieldValidationRuleDefinition[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FormFieldValidationRuleDefinition.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FormFieldValidationRuleDefinition[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    validationRulesPost(body: FormFieldValidationRuleDefinition | undefined): Promise<void> {
        let url_ = this.baseUrl + "/form-template/validation-rules";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValidationRulesPost(_response);
        });
    }

    protected processValidationRulesPost(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    validationRulesPut(id: number, body: FormFieldValidationRuleDefinition | undefined): Promise<void> {
        let url_ = this.baseUrl + "/form-template/validation-rules/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValidationRulesPut(_response);
        });
    }

    protected processValidationRulesPut(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    validationRulesDelete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/form-template/validation-rules/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValidationRulesDelete(_response);
        });
    }

    protected processValidationRulesDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IPermissionClient {

    /**
     * @return Success
     */
    structure(): Promise<PermissionGroup[]>;

    /**
     * @param body (optional) 
     * @return Success
     */
    permissionPost(body: AddPermissionInput | undefined): Promise<number>;

    /**
     * @param body (optional) 
     * @return Success
     */
    permissionPatch(id: number, body: UpdatePermissionInput | undefined): Promise<void>;

    /**
     * @return Success
     */
    permissionDelete(id: number): Promise<void>;

    /**
     * @param body (optional) 
     * @return Success
     */
    assignmentPost(body: AssignPermissionToGroupInput | undefined): Promise<number>;

    /**
     * @param body (optional) 
     * @return Success
     */
    assignmentPatch(id: number, body: UpdatePermissionToGroupAssignmentInput | undefined): Promise<void>;

    /**
     * @return Success
     */
    assignmentDelete(id: number): Promise<void>;
}

export class PermissionClient implements IPermissionClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    structure(): Promise<PermissionGroup[]> {
        let url_ = this.baseUrl + "/permission/structure";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStructure(_response);
        });
    }

    protected processStructure(response: Response): Promise<PermissionGroup[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PermissionGroup.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PermissionGroup[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    permissionPost(body: AddPermissionInput | undefined): Promise<number> {
        let url_ = this.baseUrl + "/permission";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPermissionPost(_response);
        });
    }

    protected processPermissionPost(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    permissionPatch(id: number, body: UpdatePermissionInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/permission/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPermissionPatch(_response);
        });
    }

    protected processPermissionPatch(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    permissionDelete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/permission/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPermissionDelete(_response);
        });
    }

    protected processPermissionDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    assignmentPost(body: AssignPermissionToGroupInput | undefined): Promise<number> {
        let url_ = this.baseUrl + "/permission/assignment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssignmentPost(_response);
        });
    }

    protected processAssignmentPost(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    assignmentPatch(id: number, body: UpdatePermissionToGroupAssignmentInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/permission/assignment/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssignmentPatch(_response);
        });
    }

    protected processAssignmentPatch(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    assignmentDelete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/permission/assignment/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssignmentDelete(_response);
        });
    }

    protected processAssignmentDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IPermissionGroupClient {

    /**
     * @param body (optional) 
     * @return Success
     */
    permissionGroupPost(body: AddPermissionGroupInput | undefined): Promise<number>;

    /**
     * @param body (optional) 
     * @return Success
     */
    permissionGroupPatch(id: number, body: UpdatePermissionGroupInput | undefined): Promise<void>;

    /**
     * @return Success
     */
    permissionGroupDelete(id: number): Promise<void>;

    /**
     * @param body (optional) 
     * @return Success
     */
    assignmentPost(body: AssignPermissionGroupToUserInput | undefined): Promise<number>;

    /**
     * @param body (optional) 
     * @return Success
     */
    assignmentPatch(id: number, body: UpdatePermissionGroupToUserAssignmentInput | undefined): Promise<void>;

    /**
     * @return Success
     */
    assignmentDelete(id: number): Promise<void>;
}

export class PermissionGroupClient implements IPermissionGroupClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    permissionGroupPost(body: AddPermissionGroupInput | undefined): Promise<number> {
        let url_ = this.baseUrl + "/permission-group";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPermissionGroupPost(_response);
        });
    }

    protected processPermissionGroupPost(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    permissionGroupPatch(id: number, body: UpdatePermissionGroupInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/permission-group/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPermissionGroupPatch(_response);
        });
    }

    protected processPermissionGroupPatch(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    permissionGroupDelete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/permission-group/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPermissionGroupDelete(_response);
        });
    }

    protected processPermissionGroupDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    assignmentPost(body: AssignPermissionGroupToUserInput | undefined): Promise<number> {
        let url_ = this.baseUrl + "/permission-group/assignment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssignmentPost(_response);
        });
    }

    protected processAssignmentPost(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    assignmentPatch(id: number, body: UpdatePermissionGroupToUserAssignmentInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/permission-group/assignment/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssignmentPatch(_response);
        });
    }

    protected processAssignmentPatch(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    assignmentDelete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/permission-group/assignment/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssignmentDelete(_response);
        });
    }

    protected processAssignmentDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class AddPermissionGroupInput implements IAddPermissionGroupInput {
    name!: string;
    description!: string;
    active?: boolean | undefined;

    constructor(data?: IAddPermissionGroupInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.active = _data["active"];
        }
    }

    static fromJS(data: any): AddPermissionGroupInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddPermissionGroupInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["active"] = this.active;
        return data;
    }
}

export interface IAddPermissionGroupInput {
    name: string;
    description: string;
    active?: boolean | undefined;
}

export class AddPermissionInput implements IAddPermissionInput {
    name!: string;
    description!: string;
    active?: boolean | undefined;

    constructor(data?: IAddPermissionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.active = _data["active"];
        }
    }

    static fromJS(data: any): AddPermissionInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddPermissionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["active"] = this.active;
        return data;
    }
}

export interface IAddPermissionInput {
    name: string;
    description: string;
    active?: boolean | undefined;
}

export class AssignPermissionGroupToUserInput implements IAssignPermissionGroupToUserInput {
    permissionId!: number;
    permissionGroupId!: number;
    validUntil?: Date | undefined;
    active?: boolean | undefined;

    constructor(data?: IAssignPermissionGroupToUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.permissionId = _data["permissionId"];
            this.permissionGroupId = _data["permissionGroupId"];
            this.validUntil = _data["validUntil"] ? new Date(_data["validUntil"].toString()) : <any>undefined;
            this.active = _data["active"];
        }
    }

    static fromJS(data: any): AssignPermissionGroupToUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new AssignPermissionGroupToUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permissionId"] = this.permissionId;
        data["permissionGroupId"] = this.permissionGroupId;
        data["validUntil"] = this.validUntil ? this.validUntil.toISOString() : <any>undefined;
        data["active"] = this.active;
        return data;
    }
}

export interface IAssignPermissionGroupToUserInput {
    permissionId: number;
    permissionGroupId: number;
    validUntil?: Date | undefined;
    active?: boolean | undefined;
}

export class AssignPermissionToGroupInput implements IAssignPermissionToGroupInput {
    permissionId!: number;
    permissionGroupId!: number;
    active?: boolean | undefined;

    constructor(data?: IAssignPermissionToGroupInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.permissionId = _data["permissionId"];
            this.permissionGroupId = _data["permissionGroupId"];
            this.active = _data["active"];
        }
    }

    static fromJS(data: any): AssignPermissionToGroupInput {
        data = typeof data === 'object' ? data : {};
        let result = new AssignPermissionToGroupInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permissionId"] = this.permissionId;
        data["permissionGroupId"] = this.permissionGroupId;
        data["active"] = this.active;
        return data;
    }
}

export interface IAssignPermissionToGroupInput {
    permissionId: number;
    permissionGroupId: number;
    active?: boolean | undefined;
}

export class DateTimeNullableSpecifiable implements IDateTimeNullableSpecifiable {
    value?: Date | undefined;
    readonly isSpecified?: boolean;

    constructor(data?: IDateTimeNullableSpecifiable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"] ? new Date(_data["value"].toString()) : <any>undefined;
            (<any>this).isSpecified = _data["isSpecified"];
        }
    }

    static fromJS(data: any): DateTimeNullableSpecifiable {
        data = typeof data === 'object' ? data : {};
        let result = new DateTimeNullableSpecifiable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value ? this.value.toISOString() : <any>undefined;
        data["isSpecified"] = this.isSpecified;
        return data;
    }
}

export interface IDateTimeNullableSpecifiable {
    value?: Date | undefined;
    isSpecified?: boolean;
}

export class FormFieldDefinition implements IFormFieldDefinition {
    title?: string | undefined;
    type?: string | undefined;
    valueTypes?: string[] | undefined;

    constructor(data?: IFormFieldDefinition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.type = _data["type"];
            if (Array.isArray(_data["valueTypes"])) {
                this.valueTypes = [] as any;
                for (let item of _data["valueTypes"])
                    this.valueTypes!.push(item);
            }
        }
    }

    static fromJS(data: any): FormFieldDefinition {
        data = typeof data === 'object' ? data : {};
        let result = new FormFieldDefinition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["type"] = this.type;
        if (Array.isArray(this.valueTypes)) {
            data["valueTypes"] = [];
            for (let item of this.valueTypes)
                data["valueTypes"].push(item);
        }
        return data;
    }
}

export interface IFormFieldDefinition {
    title?: string | undefined;
    type?: string | undefined;
    valueTypes?: string[] | undefined;
}

export class FormFieldValidationRuleDefinition implements IFormFieldValidationRuleDefinition {
    title?: string | undefined;
    type?: string | undefined;
    message?: string | undefined;
    value?: string | undefined;
    editableMessage?: boolean;
    editableValue?: boolean;
    valueTypes?: string[] | undefined;

    constructor(data?: IFormFieldValidationRuleDefinition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.type = _data["type"];
            this.message = _data["message"];
            this.value = _data["value"];
            this.editableMessage = _data["editableMessage"];
            this.editableValue = _data["editableValue"];
            if (Array.isArray(_data["valueTypes"])) {
                this.valueTypes = [] as any;
                for (let item of _data["valueTypes"])
                    this.valueTypes!.push(item);
            }
        }
    }

    static fromJS(data: any): FormFieldValidationRuleDefinition {
        data = typeof data === 'object' ? data : {};
        let result = new FormFieldValidationRuleDefinition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["type"] = this.type;
        data["message"] = this.message;
        data["value"] = this.value;
        data["editableMessage"] = this.editableMessage;
        data["editableValue"] = this.editableValue;
        if (Array.isArray(this.valueTypes)) {
            data["valueTypes"] = [];
            for (let item of this.valueTypes)
                data["valueTypes"].push(item);
        }
        return data;
    }
}

export interface IFormFieldValidationRuleDefinition {
    title?: string | undefined;
    type?: string | undefined;
    message?: string | undefined;
    value?: string | undefined;
    editableMessage?: boolean;
    editableValue?: boolean;
    valueTypes?: string[] | undefined;
}

export class LogonInput implements ILogonInput {
    username!: string;
    passwordHash!: string;

    constructor(data?: ILogonInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.passwordHash = _data["passwordHash"];
        }
    }

    static fromJS(data: any): LogonInput {
        data = typeof data === 'object' ? data : {};
        let result = new LogonInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["passwordHash"] = this.passwordHash;
        return data;
    }
}

export interface ILogonInput {
    username: string;
    passwordHash: string;
}

export class Permission implements IPermission {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    active?: boolean;

    constructor(data?: IPermission) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.active = _data["active"];
        }
    }

    static fromJS(data: any): Permission {
        data = typeof data === 'object' ? data : {};
        let result = new Permission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["active"] = this.active;
        return data;
    }
}

export interface IPermission {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    active?: boolean;
}

export class PermissionGroup implements IPermissionGroup {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    active?: boolean;
    permissions?: Permission[] | undefined;

    constructor(data?: IPermissionGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.active = _data["active"];
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(Permission.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PermissionGroup {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["active"] = this.active;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPermissionGroup {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    active?: boolean;
    permissions?: Permission[] | undefined;
}

export class RegisterInput implements IRegisterInput {
    username!: string;
    passwordHash!: string;
    firstName?: string | undefined;
    lastName?: string | undefined;

    constructor(data?: IRegisterInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.passwordHash = _data["passwordHash"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): RegisterInput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["passwordHash"] = this.passwordHash;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    }
}

export interface IRegisterInput {
    username: string;
    passwordHash: string;
    firstName?: string | undefined;
    lastName?: string | undefined;
}

export class UpdatePermissionGroupInput implements IUpdatePermissionGroupInput {
    name?: string | undefined;
    description?: string | undefined;
    active?: boolean | undefined;

    constructor(data?: IUpdatePermissionGroupInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.active = _data["active"];
        }
    }

    static fromJS(data: any): UpdatePermissionGroupInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePermissionGroupInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["active"] = this.active;
        return data;
    }
}

export interface IUpdatePermissionGroupInput {
    name?: string | undefined;
    description?: string | undefined;
    active?: boolean | undefined;
}

export class UpdatePermissionGroupToUserAssignmentInput implements IUpdatePermissionGroupToUserAssignmentInput {
    permissionId!: number;
    permissionGroupId!: number;
    validUntil?: DateTimeNullableSpecifiable;
    active?: boolean | undefined;

    constructor(data?: IUpdatePermissionGroupToUserAssignmentInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.permissionId = _data["permissionId"];
            this.permissionGroupId = _data["permissionGroupId"];
            this.validUntil = _data["validUntil"] ? DateTimeNullableSpecifiable.fromJS(_data["validUntil"]) : <any>undefined;
            this.active = _data["active"];
        }
    }

    static fromJS(data: any): UpdatePermissionGroupToUserAssignmentInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePermissionGroupToUserAssignmentInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permissionId"] = this.permissionId;
        data["permissionGroupId"] = this.permissionGroupId;
        data["validUntil"] = this.validUntil ? this.validUntil.toJSON() : <any>undefined;
        data["active"] = this.active;
        return data;
    }
}

export interface IUpdatePermissionGroupToUserAssignmentInput {
    permissionId: number;
    permissionGroupId: number;
    validUntil?: DateTimeNullableSpecifiable;
    active?: boolean | undefined;
}

export class UpdatePermissionInput implements IUpdatePermissionInput {
    name?: string | undefined;
    description?: string | undefined;
    active?: boolean | undefined;

    constructor(data?: IUpdatePermissionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.active = _data["active"];
        }
    }

    static fromJS(data: any): UpdatePermissionInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePermissionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["active"] = this.active;
        return data;
    }
}

export interface IUpdatePermissionInput {
    name?: string | undefined;
    description?: string | undefined;
    active?: boolean | undefined;
}

export class UpdatePermissionToGroupAssignmentInput implements IUpdatePermissionToGroupAssignmentInput {
    active?: boolean | undefined;

    constructor(data?: IUpdatePermissionToGroupAssignmentInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.active = _data["active"];
        }
    }

    static fromJS(data: any): UpdatePermissionToGroupAssignmentInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePermissionToGroupAssignmentInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["active"] = this.active;
        return data;
    }
}

export interface IUpdatePermissionToGroupAssignmentInput {
    active?: boolean | undefined;
}

export class User implements IUser {
    id?: number;
    login?: string | undefined;
    role?: string | undefined;
    permissions?: string[] | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.role = _data["role"];
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(item);
            }
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["role"] = this.role;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    }
}

export interface IUser {
    id?: number;
    login?: string | undefined;
    role?: string | undefined;
    permissions?: string[] | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}